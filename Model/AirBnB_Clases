#!/usr/bin/python3

import uuid
import datetime
"""create all the clses for the AirBnB"""

class KeyEntities:
    """Base class for all entities"""

    def __init__(self, id: int, create_at: str, update_at: str):
        """
        Initialize the base class
        Args:
        id (int): Unique identifier for the entity
        create_at (str): Creation date of the entity
        update_at (str): Last update date of the entity
        """
        self.id = uuid.uuid4()
        self.create_at = create_at if create_at else datetime.now().isoformat()
        self.update_at = update_at if update_at else datetime.now().isoformat()

class Place(KeyEntities):
    """Class for Place entity"""

    def __init__(self, id: int, create_at: str, update_at: str, amenities: list, host: str, city: str, reviews: list):
        """
        Initialize the Place class
        Args:
        id (int): Unique identifier for the place
        create_at (str): Creation date of the place
        update_at (str): Last update date of the place
        amenities (list): List of amenities available in the place
        host (str): Host of the place
        city (str): City where the place is located
        reviews (list): List of reviews for the place
        """
        super().__init__(id, create_at, update_at)
        self.amenities = amenities
        self.host = host
        self.city = city
        self.reviews = reviews
        #solo puede tener un host
place = Place()

class Amenities(KeyEntities):
    """Class for Amenities entity"""

    def __init__(self, id: int, create_at: str, update_at: str, name: str, address: str, description: str, num_rooms: int, num_bathrooms: int, price_night: float, max_guests: int):
        """
            Initialize the Amenities class
            Args:
            id (int): Unique identifier for the amenity
            create_at (str): Creation date of the amenity
            update_at (str): Last update date of the amenity
            name (str): Name of the amenity
            address (str): Address of the amenity
            description (str): Description of the amenity
            num_rooms (int): Number of rooms in the amenity
            num_bathrooms (int): Number of bathrooms in the amenity
            price_night (float): Price per night of the amenity
            
        """
        self.name = name
        self.address = address
        self.description = description
        self.num_rooms = num_rooms
        self.num_bathrooms = num_bathrooms
        self.price_night = price_night
        self.max_guests = max_guests

amenities = Amenities()
        
class City(KeyEntities):
    def __init__(self, id: int, create_at: str, update_at: str, longitude: float, latitude: float, name: str, country: str):
        super().__init__(id, create_at, update_at)
        self.longitude = longitude
        self.latitude = latitude
        self.name = name
        self.country = country
city = City ()

class Users(KeyEntities):
    def __init__(self, id: int, create_at: str, update_at: str, email: str, password: str, first_name: str, last_name: str):
        super().__init__(id, create_at, update_at)
        self.email = email
        self.password = password
        self.first_name = first_name
        self.last_name = last_name
        #user solo puede tener un email 
owner = Users()
reviewer = Users()
    
class Reviews(Users):
    def __init__(self, id: int, create_at: str, update_at: str, place_id: int, user_id: int, rating: int, comment: str):
        super().__init__(id, create_at, update_at)
        self.place_id = place_id
        self.user_id = user_id
        self.rating = rating
        self.comment = comment

    def write_reviews(self, message):
        print(message)
owner = Reviews ()
Reviewer = Reviews ()

class Country(City):
    def __init__(self, id: int, create_at: str, update_at: str, name: str):
        super().__init__(id, create_at, update_at)
        self.name = name
country = Country()